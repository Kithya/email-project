generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  emailAddress String    @unique
  firstName    String
  lastName     String
  imageUrl     String?
  accounts     Account[]

}

model Account {
  id             String         @id @default(cuid())
  userId         String
  accessToken    String         @unique
  emailAddress   String
  name           String
  nextDeltaToken String?
  oramaIndex     Json?
  user           User           @relation(fields: [userId], references: [id])
  emailAddresses EmailAddress[]
  threads        Thread[]
}

model Thread {
  id              String   @id @default(cuid())
  subject         String
  lastMessageDate DateTime
  participantIds  String[]
  accountId       String
  done            Boolean  @default(false)
  inboxStatus     Boolean  @default(true)
  draftStatus     Boolean  @default(false)
  sentStatus      Boolean  @default(false)
  emails          Email[]
  account         Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([done])
  @@index([inboxStatus])
  @@index([draftStatus])
  @@index([sentStatus])
  @@index([lastMessageDate])
}

model Email {
  id                   String                @id @default(cuid())
  threadId             String
  createdTime          DateTime
  lastModifiedTime     DateTime
  sentAt               DateTime
  receivedAt           DateTime
  internetMessageId    String
  subject              String
  sysLabels            String[]
  keywords             String[]
  sysClassifications   String[]
  sensitivity          Sensitivity           @default(normal)
  meetingMessageMethod MeetingMessageMethod?
  fromId               String
  hasAttachments       Boolean
  body                 String?
  bodySnippet          String?
  inReplyTo            String?
  references           String?
  threadIndex          String?
  internetHeaders      Json[]
  nativeProperties     Json?
  folderId             String?
  omitted              String[]
  emailLabel           EmailLabel            @default(inbox)
  from                 EmailAddress          @relation("FromEmail", fields: [fromId], references: [id], onDelete: Cascade)
  thread               Thread                @relation(fields: [threadId], references: [id], onDelete: Cascade)
  attachments          EmailAttachment[]
  bcc                  EmailAddress[]        @relation("BccEmails")
  cc                   EmailAddress[]        @relation("CcEmails")
  replyTo              EmailAddress[]        @relation("ReplyToEmails")
  to                   EmailAddress[]        @relation("ToEmails")

  @@index([threadId])
  @@index([emailLabel])
  @@index([sentAt])
}

model EmailAddress {
  id            String  @id @default(cuid())
  name          String?
  address       String
  raw           String?
  accountId     String
  sentEmails    Email[] @relation("FromEmail")
  account       Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  receivedBcc   Email[] @relation("BccEmails")
  receivedCc    Email[] @relation("CcEmails")
  replyToEmails Email[] @relation("ReplyToEmails")
  receivedTo    Email[] @relation("ToEmails")

  @@unique([accountId, address])
}

model EmailAttachment {
  id              String  @id @default(cuid())
  name            String
  mimeType        String
  size            Int
  inline          Boolean
  contentId       String?
  content         String?
  contentLocation String?
  emailId         String
  contentHash     String?
  docMeta         Json?
  pagesCount      Int?
  summary         String?
  extractedText   String?
  Email           Email   @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@index([emailId])
  @@index([contentHash])
}

enum EmailLabel {
  inbox
  sent
  draft
}

enum Sensitivity {
  normal
  private
  personal
  confidential
}

enum MeetingMessageMethod {
  request
  reply
  cancel
  counter
  other
}

